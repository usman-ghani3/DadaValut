{"version":3,"sources":["../../src.ts/brain-wallet.ts","../../src.ts/nonce-manager.ts"],"names":["usernameBytes","utils","arrayify"],"mappings":"+TAQM,EAAS,IAAI,IAAO,MAAM,OAAO,KAEnC,GAAS,EAEA,EAAb,YAAE,qBAAF,iBAAE,SAAF,IAAI,2BAAJ,wBAAE,4BAAE,IAAJ,YAAI,MAEA,SAAiB,EAAiC,EAAiC,EAAiB,GAC3F,IACD,EAAO,KAAK,kGACZ,GAAS,GAEb,IAAIA,EAA4B,KAC5B,EAA4B,KAgBhC,MAdyB,kBAAd,GACP,EAAO,iBACP,EAAgB,IAAO,MAAM,YAAY,EAAS,UAAU,UAE5D,EAAgB,IAAOC,MAAMC,SAAS,GAGjB,kBAAd,GACP,EAAO,iBACP,EAAgB,IAAO,MAAM,YAAY,EAAS,UAAU,UAE5D,EAAgB,IAAO,MAAM,SAAS,GAGnC,IAAO,OAAO,EAAe,EAAgB,GAAK,GAAK,EAAG,EAAG,GAAI,GAAkB,MAAK,SAAC,GAC5F,GAAI,EACA,OAAO,IAAI,EAAY,GAG3B,IAAM,EAAW,IAAO,MAAM,kBAAkB,IAAO,MAAM,SAAS,GAAK,MAAM,EAAG,KACpF,OAAO,IAAI,EAAY,IAAO,OAAO,aAAa,SA9B9D,CAAI,IAAJ,WAAI,MAkCA,SAAgB,EAAiC,EAAiC,GAC9E,OAAO,EAAY,UAAU,EAAU,GAAU,EAAO,KAnChE,CAAI,IAAJ,iBAAI,MAsCA,SAAsB,EAAiC,EAAiC,GACpF,OAAO,EAAY,UAAU,EAAU,GAAU,EAAM,OAvC/D,GAAiC,IAAO,Q,QCNlC,EAAS,IAAI,IAAO,MAAM,OAAO,KAK1B,EAAb,YAAE,qBAAF,iBAMI,WAAY,GAAqB,iCAC7B,EAAO,SAAP,0CAA4B,IAC5B,gBACK,YAAc,EACnB,IAAO,MAAM,eAAb,eAAkC,SAAU,GACxC,EAAJ,EAAO,MAAM,eAAb,eAAkC,WAAY,EAAO,UAAY,MALpC,EANnC,uBAAE,IAAJ,UAAI,MAcA,SAAQ,GACJ,OAAO,IAAI,EAAa,KAAK,OAAO,QAAQ,MAfpD,CAAI,IAAJ,aAAI,MAkBA,WACI,OAAO,KAAK,OAAO,eAnB3B,CAAI,IAAJ,sBAAI,MAsBA,SAAoB,GAChB,GAAiB,YAAb,EAAwB,CACnB,KAAK,kBACN,KAAK,gBAAkB,KAAK,OAAO,oBAAoB,YAE3D,IAAM,EAAa,KAAK,YACxB,OAAO,KAAK,gBAAgB,MAAK,SAAC,GAAD,OAAc,EAAU,KAG7D,OAAO,KAAK,OAAO,oBAAoB,KA/B/C,CAAI,IAAJ,sBAAI,MAkCA,SAAoB,GAChB,KAAK,gBAAkB,QAAQ,QAAQ,GAAkB,MAAK,SAAC,GAC3D,OAAO,IAAO,UAAU,KAAK,GAAO,cAExC,KAAK,YAAc,IAtC3B,CAAI,IAAJ,4BAAI,MAyCA,SAA0B,GACtB,KAAK,aAAgB,GAAe,IA1C5C,CAAI,IAAJ,cAAI,MA6CA,SAAY,GACR,OAAO,KAAK,OAAO,YAAY,KA9CvC,CAAI,IAAJ,kBAAI,MAiDA,SAAgB,GACZ,OAAO,KAAK,OAAO,gBAAgB,KAlD3C,CAAI,IAAJ,kBAAI,MAqDA,SAAgB,GASZ,OARyB,MAArB,EAAY,QACZ,EAAc,IAAO,MAAM,YAAY,IAC3B,MAAQ,KAAK,oBAAoB,WAC7C,KAAK,6BAEL,KAAK,oBAAoB,EAAY,OAGlC,KAAK,OAAO,gBAAgB,GAAa,MAAK,SAAC,GAClD,OAAO,SA/DnB,GAAkC,IAAO,Q","file":"static/js/51.c056526b.chunk.js","sourcesContent":["\"use strict\";\nimport { ethers } from \"ethers\";\nimport scrypt from \"scrypt-js\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\nlet warned = false;\nexport class BrainWallet extends ethers.Wallet {\n    static _generate(username, password, legacy, progressCallback) {\n        if (!warned) {\n            logger.warn(\"Warning: using Brain Wallets should be considered insecure (this warning will not be repeated)\");\n            warned = true;\n        }\n        let usernameBytes = null;\n        let passwordBytes = null;\n        if (typeof (username) === 'string') {\n            logger.checkNormalize();\n            usernameBytes = ethers.utils.toUtf8Bytes(username.normalize('NFKC'));\n        }\n        else {\n            usernameBytes = ethers.utils.arrayify(username);\n        }\n        if (typeof (password) === 'string') {\n            logger.checkNormalize();\n            passwordBytes = ethers.utils.toUtf8Bytes(password.normalize('NFKC'));\n        }\n        else {\n            passwordBytes = ethers.utils.arrayify(password);\n        }\n        return scrypt.scrypt(passwordBytes, usernameBytes, (1 << 18), 8, 1, 32, progressCallback).then((key) => {\n            if (legacy) {\n                return new BrainWallet(key);\n            }\n            const mnemonic = ethers.utils.entropyToMnemonic(ethers.utils.arrayify(key).slice(0, 16));\n            return new BrainWallet(ethers.Wallet.fromMnemonic(mnemonic));\n        });\n    }\n    static generate(username, password, progressCallback) {\n        return BrainWallet._generate(username, password, false, progressCallback);\n    }\n    static generateLegacy(username, password, progressCallback) {\n        return BrainWallet._generate(username, password, true, progressCallback);\n    }\n}\n//# sourceMappingURL=brain-wallet.js.map","\"use strict\";\nimport { ethers } from \"ethers\";\nimport { version } from \"./_version\";\nconst logger = new ethers.utils.Logger(version);\n// @TODO: Keep a per-NonceManager pool of sent but unmined transactions for\n//        rebroadcasting, in case we overrun the transaction pool\nexport class NonceManager extends ethers.Signer {\n    constructor(signer) {\n        logger.checkNew(new.target, NonceManager);\n        super();\n        this._deltaCount = 0;\n        ethers.utils.defineReadOnly(this, \"signer\", signer);\n        ethers.utils.defineReadOnly(this, \"provider\", signer.provider || null);\n    }\n    connect(provider) {\n        return new NonceManager(this.signer.connect(provider));\n    }\n    getAddress() {\n        return this.signer.getAddress();\n    }\n    getTransactionCount(blockTag) {\n        if (blockTag === \"pending\") {\n            if (!this._initialPromise) {\n                this._initialPromise = this.signer.getTransactionCount(\"pending\");\n            }\n            const deltaCount = this._deltaCount;\n            return this._initialPromise.then((initial) => (initial + deltaCount));\n        }\n        return this.signer.getTransactionCount(blockTag);\n    }\n    setTransactionCount(transactionCount) {\n        this._initialPromise = Promise.resolve(transactionCount).then((nonce) => {\n            return ethers.BigNumber.from(nonce).toNumber();\n        });\n        this._deltaCount = 0;\n    }\n    incrementTransactionCount(count) {\n        this._deltaCount += (count ? count : 1);\n    }\n    signMessage(message) {\n        return this.signer.signMessage(message);\n        ;\n    }\n    signTransaction(transaction) {\n        return this.signer.signTransaction(transaction);\n    }\n    sendTransaction(transaction) {\n        if (transaction.nonce == null) {\n            transaction = ethers.utils.shallowCopy(transaction);\n            transaction.nonce = this.getTransactionCount(\"pending\");\n            this.incrementTransactionCount();\n        }\n        else {\n            this.setTransactionCount(transaction.nonce);\n        }\n        return this.signer.sendTransaction(transaction).then((tx) => {\n            return tx;\n        });\n    }\n}\n//# sourceMappingURL=nonce-manager.js.map"],"sourceRoot":""}