{"version":3,"sources":["../../src/index.ts"],"names":["ConnectorEvent","AbstractConnector","supportedChainIds","emitUpdate","emitError","emitDeactivate","TorusConnector","chainId","initOptions","constructorOptions","loginOptions","accounts","account","provider","this","torus","m","Torus","e"],"mappings":"gJAUA,E,UAAA,SAAYA,GACVA,2BACAA,yBACAA,mCAHF,CAAYA,MAAZ,K,IAPsBC,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYC,Y,KAIR,KAAUH,EAAV,W,EAlBJ,UAqBYI,Y,KAIR,KAAUJ,EAAV,U,EAzBJ,eA4BYK,W,KAIR,KAAUL,EAAV,a,EAhCJ,kB,4FAOaM,EAAb,Y,QAQE,c,MAAcC,Y,IAASC,uBAAcA,EAAA,K,IAAIC,8BAAqBA,EAAA,K,IAAIC,wBAAeA,EAAA,K,OAC/E,cAAM,CAAER,kBAAmB,CAACK,MAA5B,MAEA,UACA,gBACA,uBACA,iB,IAdJ,G,EAAA,G,6EAAA,mD,wCAwB0B,cAAiB,EAAjB,oBAAyC,mBAAgCI,EAAhC,OAAzC,eAAhBC,GAEN,MAAO,CAAEC,SAAU,QAAZ,SAAiCD,e,EARnCE,K,iBAAA,EAAKC,M,uBACY,6DAAsC,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,QAAvC,eAAdC,G,OACN,QAAa,IAAIA,EAAM,EAAvB,oB,gBACM,aAAgB,EAAhB,sC,mDArBZ,MAAAC,GAAA,sBAAAA,KAAA,6BA8BI,uBAAOJ,KAAA,MAAP,UA9BJ,MAAAI,GAAA,sBAAAA,KAAA,4BAkCI,uBAAOJ,KAAP,SAlCJ,MAAAI,GAAA,sBAAAA,KAAA,4BAsCI,uBAAOJ,KAAA,0CAA8C,mBAAgCH,EAAhC,OAtCzD,MAAAO,GAAA,sBAAAA,KAAA,wB,0BAAA,uB,MA4CUJ,K,uBAAA,oCACN,sBA7CJ,MAAAI,GAAA,sBAAAA,KAAA,G,QAAA","file":"static/js/47.2002d0cb.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}